Description: "create vpc with: subnets, internet gateway. create security groups"

Metadata:
  AWS::CloudFormation::Interface:
    ParameterGroups:
      - Label:
          default: "Common configuration"
        Parameters:
          - UsernameForPrefix

      - Label:
          default: "VPC configuration"
        Parameters:
          - VpcCIDR
          - AvailabilityZone1
          - AvailabilityZone2
          - PublicSubnet1CIDR
          - PublicSubnet2CIDR
          - PrivateSubnet1CIDR
          - PrivateSubnet2CIDR
      - Label:
          default: "Security groups configuration"
        Parameters:
          - CIDRHttp
          - CIDRSSH

Parameters:
  UsernameForPrefix:
    Description: Username name that is prefixed to resource names
    Type: String

  VpcCIDR:
    Type: String
    Default: 10.0.0.0/16

  AvailabilityZone1:
    Type: AWS::EC2::AvailabilityZone::Name

  AvailabilityZone2:
    Type: AWS::EC2::AvailabilityZone::Name

  PublicSubnet1CIDR:
    Type: String
    Default: 10.0.11.0/24

  PublicSubnet2CIDR:
    Type: String
    Default: 10.0.21.0/24

  PrivateSubnet1CIDR:
    Type: String
    Default: 10.0.12.0/24

  PrivateSubnet2CIDR:
    Type: String
    Default: 10.0.22.0/24

  CIDRHttp:
    Type: String
    Default: 0.0.0.0/0

  CIDRSSH:
    Type: String
    Default: change_me_current_ip/32
    Description: http://checkip.amazonaws.com/ to get current_i


Resources:
  #create vpc structure
  VPC:
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock: !Ref VpcCIDR
      Tags:
        - Key: Name
          Value: !Sub ${UsernameForPrefix}-VPC

  InternetGateway:
    Type: AWS::EC2::InternetGateway
    Properties:
      Tags:
        - Key: Name
          Value: !Sub ${UsernameForPrefix}-InternetGateway

  InternetGatewayAttachment:
    Type: AWS::EC2::VPCGatewayAttachment
    Properties:
      InternetGatewayId: !Ref InternetGateway
      VpcId: !Ref VPC

  PublicSubnet1:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      AvailabilityZone: !Ref AvailabilityZone1
      CidrBlock: !Ref PublicSubnet1CIDR
      MapPublicIpOnLaunch: true
      Tags:
        - Key: Name
          Value: !Sub ${UsernameForPrefix}-public-subnet-az1

  PublicSubnet2:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      AvailabilityZone: !Ref AvailabilityZone2
      CidrBlock: !Ref PublicSubnet2CIDR
      MapPublicIpOnLaunch: true
      Tags:
        - Key: Name
          Value: !Sub ${UsernameForPrefix}-public-subnet-az2

  PrivateSubnet1:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      AvailabilityZone: !Ref AvailabilityZone1
      CidrBlock: !Ref PrivateSubnet1CIDR
      MapPublicIpOnLaunch: false
      Tags:
        - Key: Name
          Value: !Sub ${UsernameForPrefix}-private-subnet-az1

  PrivateSubnet2:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      AvailabilityZone: !Ref AvailabilityZone2
      CidrBlock: !Ref PrivateSubnet2CIDR
      MapPublicIpOnLaunch: false
      Tags:
        - Key: Name
          Value: !Sub ${UsernameForPrefix}-private-subnet-az2

  PublicRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref VPC
      Tags:
        - Key: Name
          Value: !Sub ${UsernameForPrefix}-public-route-table

  PublicRoteForPublicTable:
    Type: AWS::EC2::Route
    DependsOn: InternetGatewayAttachment
    Properties:
      RouteTableId: !Ref PublicRouteTable
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId: !Ref InternetGateway

  PublicSubnet1RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref PublicRouteTable
      SubnetId: !Ref PublicSubnet1

  PublicSubnet2RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref PublicRouteTable
      SubnetId: !Ref PublicSubnet2

  PrivateRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref VPC
      Tags:
        - Key: Name
          Value: !Sub ${UsernameForPrefix}-private-route-table

  PrivateRouteTableAssociation1:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref PrivateRouteTable
      SubnetId: !Ref PrivateSubnet1

  PrivateRouteTableAssociation2:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref PrivateRouteTable
      SubnetId: !Ref PrivateSubnet2

  DBSubnetGroup:
    Type: "AWS::RDS::DBSubnetGroup"
    Properties:
      DBSubnetGroupDescription: rds subnet group in private subnets
      SubnetIds:
        - !Ref PrivateSubnet1
        - !Ref PrivateSubnet2
      Tags:
        - Key: Name
          Value: !Sub ${UsernameForPrefix}-subnet-group

  #create security groups
  NoIngressSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      VpcId: !Ref VPC
      GroupName: !Sub ${UsernameForPrefix}-private-group
      GroupDescription: "Security group with no ingress rule"

  NoIngressSecurityGroupRule:
    Type: 'AWS::EC2::SecurityGroupIngress'
    Properties:
      GroupId: !GetAtt NoIngressSecurityGroup.GroupId
      IpProtocol: All
      SourceSecurityGroupId: !GetAtt NoIngressSecurityGroup.GroupId

  HTTPSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      VpcId: !Ref VPC
      GroupName: !Sub ${UsernameForPrefix}-http-group
      GroupDescription: http from specified ip
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 80
          ToPort: 80
          CidrIp: !Ref CIDRHttp

  SSHSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      VpcId: !Ref VPC
      GroupName: !Sub ${UsernameForPrefix}-ssh-group
      GroupDescription: shh from specified ip
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 22
          ToPort: 22
          CidrIp: !Ref CIDRSSH

Outputs:
  VPC:
    Description: A reference to the created VPC
    Value: !Ref VPC

  PublicSubnets:
    Description: public subnets
    Value: !Join [ ",", [ !Ref PublicSubnet1, !Ref PublicSubnet2 ] ]

  PrivateSubnets:
    Description: private subnets
    Value: !Join [ ",", [ !Ref PrivateSubnet1, !Ref PrivateSubnet2 ] ]

  SubnetGroup:
    Description: RDS subnet group
    Value: !Ref DBSubnetGroup

  SecurityGroups:
    Description: Security groups
    Value: !Join [ ",", [ !Ref NoIngressSecurityGroupRule, !Ref HTTPSecurityGroup, !Ref SSHSecurityGroup ] ]